{"ast":null,"code":"import axios from 'axios';\nconst uri = 'http://localhost:5000/api/v1/auth';\nexport const signOnService = async user => {\n  const route = user.isMember ? `${uri}/login` : `${uri}/register`;\n  console.log('THe route is: ', route);\n  console.log(user.isMember);\n  try {\n    return await axios.post(route, user, {\n      withCredentials: true\n    });\n  } catch (error) {}\n};\nexport const getAuthenticateUser = async () => {\n  const route = `${uri}/getUser`;\n  const response = await axios.post(route, {\n    withCredentials: true\n  });\n  return response;\n};","map":{"version":3,"names":["axios","uri","signOnService","user","route","isMember","console","log","post","withCredentials","error","getAuthenticateUser","response"],"sources":["D:/MERN/Login - Logout/client/src/services/login.js"],"sourcesContent":["import axios from 'axios';\r\nconst uri = 'http://localhost:5000/api/v1/auth';\r\n\r\nexport const signOnService = async user => {\r\n  const route = user.isMember ? `${uri}/login` : `${uri}/register`;\r\n  console.log('THe route is: ', route);\r\n  console.log(user.isMember);\r\n  try {\r\n    return await axios.post(route, user, {\r\n      withCredentials: true,\r\n    });\r\n  } catch (error) {\r\n    \r\n  }\r\n};\r\n\r\nexport const getAuthenticateUser = async () => {\r\n  const route = `${uri}/getUser`;\r\n  const response = await axios.post(route, { withCredentials: true });\r\n  return response;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAG,mCAAmC;AAE/C,OAAO,MAAMC,aAAa,GAAG,MAAMC,IAAI,IAAI;EACzC,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAQ,GAAI,GAAEJ,GAAI,QAAO,GAAI,GAAEA,GAAI,WAAU;EAChEK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,KAAK,CAAC;EACpCE,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACE,QAAQ,CAAC;EAC1B,IAAI;IACF,OAAO,MAAML,KAAK,CAACQ,IAAI,CAACJ,KAAK,EAAED,IAAI,EAAE;MACnCM,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,YAAY;EAC7C,MAAMP,KAAK,GAAI,GAAEH,GAAI,UAAS;EAC9B,MAAMW,QAAQ,GAAG,MAAMZ,KAAK,CAACQ,IAAI,CAACJ,KAAK,EAAE;IAAEK,eAAe,EAAE;EAAK,CAAC,CAAC;EACnE,OAAOG,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}